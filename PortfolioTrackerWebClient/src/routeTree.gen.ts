/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthorizedRoutesRouteImport } from './routes/_authorizedRoutes'
import { Route as PublicRoutesIndexRouteImport } from './routes/_publicRoutes/index'
import { Route as AuthorizedRoutesDashboardRouteImport } from './routes/_authorizedRoutes/Dashboard'

const AuthorizedRoutesRoute = AuthorizedRoutesRouteImport.update({
  id: '/_authorizedRoutes',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoutesIndexRoute = PublicRoutesIndexRouteImport.update({
  id: '/_publicRoutes/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorizedRoutesDashboardRoute =
  AuthorizedRoutesDashboardRouteImport.update({
    id: '/Dashboard',
    path: '/Dashboard',
    getParentRoute: () => AuthorizedRoutesRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/Dashboard': typeof AuthorizedRoutesDashboardRoute
  '/': typeof PublicRoutesIndexRoute
}
export interface FileRoutesByTo {
  '/Dashboard': typeof AuthorizedRoutesDashboardRoute
  '/': typeof PublicRoutesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authorizedRoutes': typeof AuthorizedRoutesRouteWithChildren
  '/_authorizedRoutes/Dashboard': typeof AuthorizedRoutesDashboardRoute
  '/_publicRoutes/': typeof PublicRoutesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/Dashboard' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/Dashboard' | '/'
  id:
    | '__root__'
    | '/_authorizedRoutes'
    | '/_authorizedRoutes/Dashboard'
    | '/_publicRoutes/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthorizedRoutesRoute: typeof AuthorizedRoutesRouteWithChildren
  PublicRoutesIndexRoute: typeof PublicRoutesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authorizedRoutes': {
      id: '/_authorizedRoutes'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthorizedRoutesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_publicRoutes/': {
      id: '/_publicRoutes/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicRoutesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authorizedRoutes/Dashboard': {
      id: '/_authorizedRoutes/Dashboard'
      path: '/Dashboard'
      fullPath: '/Dashboard'
      preLoaderRoute: typeof AuthorizedRoutesDashboardRouteImport
      parentRoute: typeof AuthorizedRoutesRoute
    }
  }
}

interface AuthorizedRoutesRouteChildren {
  AuthorizedRoutesDashboardRoute: typeof AuthorizedRoutesDashboardRoute
}

const AuthorizedRoutesRouteChildren: AuthorizedRoutesRouteChildren = {
  AuthorizedRoutesDashboardRoute: AuthorizedRoutesDashboardRoute,
}

const AuthorizedRoutesRouteWithChildren =
  AuthorizedRoutesRoute._addFileChildren(AuthorizedRoutesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthorizedRoutesRoute: AuthorizedRoutesRouteWithChildren,
  PublicRoutesIndexRoute: PublicRoutesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
